services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 3080
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "3080:3080"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:3080'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic created-lead --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic event-to-score --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic event-to-score-end --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic score-calculated --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: nest_microservices
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  lead:
    build:
      context: .
      dockerfile: ./src/lead/Dockerfile
    depends_on:
      - init-kafka
      - db
    environment:
      DATABASE_URL: postgres://admin:admin@db:5432/nest_microservices
      KAFKA_BROKER: kafka:29092
      KAFKA_CLIENT_ID: lead
      KAFKA_CONSUMER_GROUP: lead
    ports:
      - "3000:3000"
    volumes:
      - ./src/lead:/usr/src/app/pkg
      - /usr/src/app/node_modules

  event:
    build:
      context: .
      dockerfile: ./src/event/Dockerfile
    depends_on:
      - init-kafka
      - db
    environment:
      DATABASE_URL: postgres://admin:admin@db:5432/nest_microservices
      KAFKA_BROKER: kafka:29092
      KAFKA_CLIENT_ID: event
      KAFKA_CONSUMER_GROUP: event
    ports:
      - "3001:3000"
    volumes:
      - ./src/event:/usr/src/app/pkg
      - /usr/src/app/node_modules

  score:
    build:
      context: .
      dockerfile: ./src/score/Dockerfile
    depends_on:
      - init-kafka
      - db
    environment:
      DATABASE_URL: postgres://admin:admin@db:5432/nest_microservices
      KAFKA_BROKER: kafka:29092
      KAFKA_CLIENT_ID: score
      KAFKA_CONSUMER_GROUP: score
    ports:
      - "3002:3000"
    volumes:
      - ./src/score:/usr/src/app/pkg
      - /usr/src/app/node_modules

  api_gateway:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - lead
      - event
      - score

volumes:
  pgdata: